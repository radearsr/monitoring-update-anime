generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model anime_genres {
  id      Int    @id @default(autoincrement())
  animeId Int
  genreId Int
  animes  animes @relation(fields: [animeId], references: [animeId])
  genres  genres @relation(fields: [genreId], references: [genreId])
}

model animes {
  animeId           Int            @id @default(autoincrement())
  title             String?        @db.VarChar(100)
  rating            Float
  description       String?
  poster            String?        @db.VarChar(100)
  type              AnimeType      @default(Series)
  originalSource    String         @db.VarChar(100)
  releaseDate       DateTime       @db.Date
  status            StatusUpdate   @default(Completed)
  slug              String?        @db.VarChar(100)
  publish           StatusPublish  @default(Publish)
  createdAt         DateTime       @default(now())
  lastUpdateEpisode DateTime       @default(now()) @db.Timestamp(6)
  anime_genres      anime_genres[]
  episodes          episodes[]
}

model authentications {
  token String @unique
}

model carousel {
  id          Int           @id @default(autoincrement())
  title       String        @db.VarChar(100)
  description String
  type        AnimeType
  slug        String        @db.VarChar(100)
  poster      String        @db.VarChar(100)
  background  String        @db.VarChar(100)
  releaseDate DateTime      @db.Date
  animeId     Int
  createdAt   DateTime      @default(now())
  publish     StatusPublish @default(Publish)
}

model episodes {
  id               Int           @id @default(autoincrement())
  episodeType      EpisodeType   @default(Tv)
  streamStrategy   streamType    @default(OwnServer)
  numEpisode       Int
  sourceDefault    String
  sourceHd         String
  animeId          Int
  createdAt        DateTime      @default(now())
  publish          StatusPublish @default(Publish)
  originalSourceEp String
  animes           animes        @relation(fields: [animeId], references: [animeId])
}

model genres {
  genreId      Int            @id @default(autoincrement())
  name         String?        @db.VarChar(50)
  slug         String?        @unique
  restricted   Boolean?       @default(false)
  anime_genres anime_genres[]
}

model roles {
  roleId Int     @id @default(autoincrement())
  name   String? @db.VarChar(50)
  users  users[]
}

model users {
  id        Int      @id @default(autoincrement())
  firstName String?  @db.VarChar(255)
  lastName  String?  @db.VarChar(255)
  username  String?  @db.VarChar(255)
  password  String?
  email     String?  @db.VarChar(200)
  roleId    Int
  createdAt DateTime @default(now())
  roles     roles    @relation(fields: [roleId], references: [roleId])
}

enum AnimeType {
  Movie
  Series
}

enum EpisodeType {
  Tv
  Ova
}

enum StatusPublish {
  Publish
  NonPublish
}

enum StatusUpdate {
  Ongoing
  Completed
}

enum streamType {
  Otakudesu
  OwnServer
  Mp4
}
